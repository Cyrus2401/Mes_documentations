- Git a trois grandes fonctionnalités :
	1. Revenir à une version précédente de votre code en cas de problème.
	2. Suivre l’évolution de votre code étape par étape.
	3. Travailler à plusieurs sans risquer de supprimer les modifications des autres collaborateurs. 
	
- Git est un gestionnaire de versions tandis que GitHub est un service en ligne qui héberge les dépôts Git. On parle alors de dépôt distant.

- Git est un gestionnaire de version décentralisé. Cela signifie qu'en tant qu'utilisateur, vous disposez de votre propre dépôt et d'une copie locale du projet sur lequel vous travaillez. Vous pouvez donc avancer à votre rythme sur votre dépôt local et hors connexion.

- Un dépôt est comme un dossier qui conserve un historique des versions et des modifications d’un projet. Il peut être local ou distant.

- Un dépôt local est un entrepôt virtuel de votre projet. Il vous permet d'enregistrer les versions de votre code et d'y accéder au besoin.

- Le dépôt distant permet de stocker les différentes versions de votre code afin de garder un historique délocalisé, c'est-à-dire un historique hébergé sur Internet ou sur un réseau.

- Ainsi, les dépôts sont utiles si :
	. vous souhaitez conserver un historique de votre projet ;
	. vous travaillez à plusieurs ;
	. vous souhaitez collaborer à des projets open source ;
	. vous devez retrouver par qui a été faite chaque modification ;
	. vous voulez savoir pourquoi chaque modification a eu lieu.
	
- Pour initialiser son projet avec Git, on fait : Git init

- Pour indexer ou stage un fichier, on utilise la commande : git add nomFichier ou git add nomFichier1 nomFichier2

- Pour créer une version, on utilise la commande : git commit -m “Ajout des fichiers html et css de base”
	. "-m" est un argment qui permet de définir un message particulier rattaché au commit effectué
	. Si vous n’utilisez pas cet argument, la commande “git commit” ouvrira un éditeur de texte dans lequel vous pourrez saisir le message de commit.
	. “Ajout des fichiers html et css de base” est le message rattaché au commit grâce à l'argument "-m".
	
- Pour envoyer notre version (commit) sur le dépôt distant (Github) : git push -u origin main

- Pour connaître les branches présentes dans notre projet, il faut taper la ligne de commande : git branch

- Pour créer une branche : git branch nomDeLaBranche

- Pour basculer vers une branche : git checkout nomDeLaBranche

- Pour fusionner une branche "azerty" à la branche principale par exemple, on va sur la branche principale et on fait : git merge azerty

- Pour supprimer une branche : git branch -d nomDeLaBranche
	. Si des modifications ont déjà été faites sur la branche : git branch -D nomDeLaBranche
	
- Il peut arriver de modifier une branche principale par erreur. Si vous avez modifié votre branche principale (main ou master) avant de créer votre branche et que vous n'avez pas fait le commit, ce n’est pas bien grave. Il vous suffit de faire une remise - ou un stash en anglais. La remise, ou stash, permet de mettre vos modifications de côté, les ranger, le temps de créer votre nouvelle branche et d’appliquer cette remise sur la nouvelle branche.
	. Faire un "git status" pour voir les fichiers modifiés mais qui n'ont pas encore été commités
	. git stash : Créez un stash (la branche pricipale est maintenant propre)
	. créer la nouvelle branche
	. basculer vers celle-ci
	. git stash apply : appliquer le dernier stash qui a été fait. Si pour une raison ou une autre, vous avez créé plusieurs stash, et que le dernier n'est pas celui que vous souhaitez appliquer, 
		. git stash list : regarder la liste de tous les stash
		. git stash apply stash@{0} : pour appliquer les stash "stash@{0}"
		
- Si contrairement au cas précédent le commit a été fait ; 
	. git log :  analyser les derniers commits
	. Maintenant que vous disposez de votre identifiant, gardez-le bien de côté. Vérifiez que vous êtes sur votre branche principale et réalisez la commande suivante : git reset --hard HEAD^. Cette ligne de commande va supprimer de la branche principale votre dernier commit. Le HEAD^ indique que c'est bien le dernier commit que nous voulons supprimer. L’historique sera changé, les fichiers seront supprimés.
	. créer une nouvelle branche et y basculer
	. Faire "git reset --hard ca83a6df" avec ca83a6df l'identifiant du commit (Il n'est pas nécessaire d'écrire l'identifiant en entier. Seuls les 8 premiers caractères sont nécessaires.)
	
- Si vous faites une erreur dans l'un de vos messages de commit, il est possible de changer le message après coup avec : git commit --amend -m "Votre nouveau message de commit"
	. On peut vérifier avec : git log
	
- Si aviez fait votre commit mais que vous réalisiez que vous avez oublié un fichier.
	. git add fichierOublié.txt
	. git commit --amend --no-edit

- git status : permet de voir l’état des fichiers.

- git revert HEAD^ : annuler des changements apportés à une branche publique

- git reset HEAD : annuler des changements apportés à une branche privée

- Si votre accès à distance ne fonctionne pas, cela peut être dû à un problème d’authentification de votre réseau. Pour le résoudre, il vous faut créer une paire de clés SSH.
	. ssh-keygen -t rsa -b 4096 -C "johndoe@example.com" avec johndoe@example.com l'email
	. Pour la trouver (la clé), il suffit d'aller à l'adresse : C:\Users\VotreNomD'Utilisateur\, et d'afficher les dossiers masqués.
	. La clé id_rsa.txt est votre clé privée alors que la clé id_rsa.pub est votre clé publique. Ici nous allons utiliser votre clé publique seulement. Vous pouvez copier votre clé publique en l'ouvrant dans un bloc-notes.
	. Aller su Github dans "Settings" puis "SSH and GPG keys" puis "New SSH Key"
	. Vous devrez ensuite confirmer votre mot de passe. Votre clé SSH sera alors ajoutée à votre compte GitHub !
	
- git reset : annuler les changements
	. git reset notreCommitCible --hard : Cette commande permet de revenir à n'importe quel commit mais en oubliant absolument tout ce qu'il s'est passé après
	. git reset --mixed : va permettre de revenir juste après votre dernier commit ou le commit spécifié, sans supprimer vos modifications en cours
	. git reset --soft : permet de se placer sur un commit spécifique afin de voir le code à un instant donné, ou de créer une branche partant d'un ancien commit. Elle ne supprime aucun fichier, aucun commit, et ne crée pas de HEAD détaché.
	
- git reset va revenir à l'état précédent sans créer un nouveau commit, alors que  git revert  va créer un nouveau commit.
